<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="reservation">
	
	<!-- 샵 예약 리스트 조회 -->
	<select id = "selectRsvnList" resultType="java.util.HashMap">
	
		select rsvnnum, memberid, membername, memberphone, 
				RESERVATION2.designname designname, nvl(SHOPDESIGN2.designname,'해당없음') optionname,
				RESERVATION2.designprice + nvl(SHOPDESIGN2.designprice,0) designprice, 
				 bookingdate, rsvndate, RESERVATION2.shopnum
		
		from
			(select rsvnnum, memberid, membername, shopdesign.designname designname, optionnum,
					 shopdesign.designprice designprice, 
					bookingdate, rsvndate, memberphone, RESERVATION.shopnum shopnum
					
			 from
				(select rsvnnum, memberid, membername, designid, designid2 optionnum, 
						bookingdate, rsvndate, memberphone, shopnum
			 	 from reservation  inner join memberList 
			 	 using(memberid)
			 	 ) RESERVATION,  SHOPDESIGN
			where RESERVATION.designid = shopdesign.designid
			and RESERVATION.shopnum = #{shopnum}
		
			) 
			reservation2 left outer join SHOPDESIGN SHOPDESIGN2
		ON reservation2.optionnum = SHOPDESIGN2.designid
		order by rsvnnum
			
		
	</select>
	
	
	<!-- 월별 예약수 조회 -->
	<select id = "selectMonthlyRsvnCount"  resultType="java.util.HashMap">
		
		select yearmonth.ym ym, nvl(cnt,0) cnt

		from (select to_char(add_months(to_date('201901', 'YYYYMM'),(level - 1)), 'yyyy-mm') ym
 			 from dual
 			<![CDATA[
			 connect by add_months(to_date('201901', 'YYYYMM'),(level - 1)) <= to_date('201901', 'YYYYMM')+364) yearmonth
	 		]]>
	 		
		 left outer join 
	 
			(select to_char(rsvndate, 'yyyy-mm') ym, count(*) cnt
			 from reservation  
			 where shopnum=#{shopnum}
			 group by to_char(rsvndate, 'yyyy-mm')) reservation
	 
		on yearmonth.ym = reservation.ym
		order by yearmonth.ym
		
	</select>
	
	
	<!-- 월별 총금액 -->
	<select id ="selectMonthlyRsvnProfits" resultType="java.util.HashMap">
		select yearmonth.ym, nvl(totalprice,0) totalprice
	
		from (select to_char(add_months(to_date('201901', 'YYYYMM'),(level - 1)), 'yyyy-mm') ym
		 	 from dual
			 <![CDATA[
			 connect by add_months(to_date('201901', 'YYYYMM'),(level - 1)) <= to_date('201901', 'YYYYMM')+364) yearmonth
	 		]]>
			
		left outer join 
			 
			(select to_char(rsvndate, 'yyyy-mm') ym, 
					sum(reservation2.designprice+nvl(SHOPDESIGN2.designprice,0)) totalPrice
			 from
				 (select RESERVATION.rsvndate rsvndate, 
						RESERVATION.designid designid, RESERVATION.designid2 optionnum, 
						shopdesign.designprice designprice
				  from RESERVATION,  SHOPDESIGN
				  where RESERVATION.designid = shopdesign.designid 
				  and RESERVATION.shopnum = #{shopnum}
				  ) reservation2 
				 
			left outer join SHOPDESIGN SHOPDESIGN2
			ON reservation2.optionnum = SHOPDESIGN2.designid
			GROUP BY to_char(rsvndate, 'yyyy-mm')) rsvn
			  
		on yearmonth.ym = rsvn.ym
		order by yearmonth.ym
	
	</select>
	
	
	<!-- 사용자 예약 리스트 조회 -->
	<select id = "selectUserRsvnList" resultType="java.util.HashMap">
	
		select rsvnnum, reservation.memberid, shopname, designname, 
				nvl(optionname,'') optionname, designprice, bookingdate, rsvndate, shopaddr,rsvnstatus, reservation.shopnum
		from (
				select rsvnnum, memberid, RESERVATION2.shopnum,
								RESERVATION2.designname designname, nvl(SHOPDESIGN2.designname,'해당없음') optionname,
								RESERVATION2.designprice + nvl(SHOPDESIGN2.designprice,0) designprice, 
								 bookingdate, rsvndate,rsvnstatus
						
						from
							(select rsvnnum, memberid, shopdesign.designname designname, designid2 optionnum,
									 shopdesign.designprice designprice, 
									bookingdate, rsvndate, RESERVATION.shopnum shopnum,rsvnstatus
									
							 from
								(select rsvnnum, memberid, shopnum, designid, bookingdate, rsvndate,rsvntime, designid2,rsvnstatus
							 	 from reservation  inner join memberList 
							 	 using(memberid)
							 	 ) RESERVATION,  SHOPDESIGN
							where RESERVATION.designid = shopdesign.designid
							 <![CDATA[ and rsvndate > sysdate ]]>
							and RESERVATION.memberid = #{memberid}
						
							) 
							reservation2 left outer join SHOPDESIGN SHOPDESIGN2
						ON reservation2.optionnum = SHOPDESIGN2.designid
				)reservation left outer join shopinfo
		ON reservation.shopnum = shopinfo.shopnum
		order by rsvnnum
	
	</select>
	
	
	
	<!-- 사용자 예약 히스토리 조회 -->
	<select id = "selectUserRsvnHistory" resultType="java.util.HashMap">
	
		select rsvnnum, reservation.memberid, shopname, designname, 
					nvl(optionname,'') optionname, designprice, bookingdate, rsvndate, shopaddr,rsvnstatus, reservation.shopnum
			from (
					select rsvnnum, memberid, RESERVATION2.shopnum,
									RESERVATION2.designname designname, nvl(SHOPDESIGN2.designname,'해당없음') optionname,
									RESERVATION2.designprice + nvl(SHOPDESIGN2.designprice,0) designprice, 
									 bookingdate, rsvndate,rsvnstatus
							
							from
								(select rsvnnum, memberid, shopdesign.designname designname, designid2 optionnum, shopdesign.designprice designprice, 
										bookingdate, rsvndate, RESERVATION.shopnum shopnum,rsvnstatus
								 from
									 (select rsvnnum, memberid, shopnum, designid, bookingdate, rsvndate,rsvntime, designid2,rsvnstatus
								 	  from reservation  inner join memberList 
								 	  using(memberid)) RESERVATION,  SHOPDESIGN
								 where RESERVATION.designid = shopdesign.designid
								  <![CDATA[ and rsvndate < sysdate ]]>
								 and RESERVATION.memberid = #{memberid}
							
								) 
								reservation2 left outer join SHOPDESIGN SHOPDESIGN2
							ON reservation2.optionnum = SHOPDESIGN2.designid
					)reservation left outer join shopinfo
			ON reservation.shopnum = shopinfo.shopnum
			order by rsvnnum
		</select>
	
	<!-- 예약 생성시 시간 닫기 -->
	<update id="createSchedule">
		<![CDATA[
			update timeSchedule set arranged=0 where shopNum=#{shopNum} and
			(startTime between to_date(#{startTime},'yyyy-mm--dd hh24:mi') and to_date(#{endTime},'yyyy-mm--dd hh24:mi'))
			and arranged=1
		]]>
	</update>
</mapper>
